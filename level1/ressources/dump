verify_user_pass:
   0x080484a3 <+0>:    push   ebp
   0x080484a4 <+1>:    mov    ebp,esp
   0x080484a6 <+3>:    push   edi
   0x080484a7 <+4>:    push   esi

   0x080484a8 <+5>:    mov    eax,DWORD PTR [ebp+0x8] // buff
   0x080484ab <+8>:    mov    edx,eax // met buff dans edx
   0x080484ad <+10>:    mov    eax,0x80486b0 // string => admin dans eax
   0x080484b2 <+15>:    mov    ecx,0x5 // met le compteur a 5
   0x080484b7 <+20>:    mov    esi,edx // met buff dans esi
   0x080484b9 <+22>:    mov    edi,eax // met la string admin dans edi
   0x080484bb <+24>:    repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi] // strncmp(buff, admin, 5)
   0x080484bd <+26>:    seta   dl  // si *esi > *edi alors on met 1 dans dl sinon 0
   0x080484c0 <+29>:    setb   al // si *esi < *edi alors on met 1 dans dl sinon 0
   0x080484c3 <+32>:    mov    ecx,edx // récupere ce qu'il y a dans dl et le met dans ecx
   0x080484c5 <+34>:    sub    cl,al // soustrait al à cl ( cl - al) (retourne  -1, 0 ou 1)
   0x080484c7 <+36>:    mov    eax,ecx // met ecx dans eax
   0x080484c9 <+38>:    movsx  eax,al // met al dans eax et remplit les octets supérieurs a 0
   
   0x080484cc <+41>:    pop    esi
   0x080484cd <+42>:    pop    edi
   0x080484ce <+43>:    pop    ebp
   0x080484cf <+44>:    ret


verify_user_name:
   0x08048464 <+0>:    push   ebp
   0x08048465 <+1>:    mov    ebp,esp
   0x08048467 <+3>:    push   edi
   0x08048468 <+4>:    push   esi
   0x08048469 <+5>:    sub    esp,0x10 // alloue 16 octets
   0x0804846c <+8>:    mov    DWORD PTR [esp],0x8048690 // arg0 = string => verifying username....\n
   0x08048473 <+15>:    call   0x8048380 <puts@plt> //call puts

   0x08048478 <+20>:    mov    edx,0x804a040 // met a_user_name dans edx
   0x0804847d <+25>:    mov    eax,0x80486a8 // string => dat_wil
   0x08048482 <+30>:    mov    ecx,0x7 // met 7 dans ecx (compteur)
   0x08048487 <+35>:    mov    esi,edx // met a_user_name dans esi 
   0x08048489 <+37>:    mov    edi,eax // // met dat_will dans edi
   0x0804848b <+39>:    repz cmps BYTE PTR ds:[esi],BYTE PTR es:[edi] // strncmp(a_user_name, dat_wil, 7)

   0x0804848d <+41>:    seta   dl // si *esi > *edi alors on met 1 dans dl sinon 0
   0x08048490 <+44>:    setb   al // si *esi < *edi alors on met 1 dans dl sinon 0
   0x08048493 <+47>:    mov    ecx, edx // récupere ce qu'il y a dans dl et le met dans ecx
   0x08048495 <+49>:    sub    cl,al // soustrait al à cl ( cl - al) (retourne  -1, 0 ou 1)
   0x08048497 <+51>:    mov    eax,ecx // met ecx dans eax
   0x08048499 <+53>:    movsx  eax,al // met al dans eax et remplit les octets supérieurs a 0

   0x0804849c <+56>:    add    esp,0x10 // reset stack
   0x0804849f <+59>:    pop    esi
   0x080484a0 <+60>:    pop    edi
   0x080484a1 <+61>:    pop    ebp
   0x080484a2 <+62>:    ret


main:
   0x080484d0 <+0>:    push   ebp
   0x080484d1 <+1>:    mov    ebp,esp
   0x080484d3 <+3>:    push   edi
   0x080484d4 <+4>:    push   ebx
   0x080484d5 <+5>:    and    esp,0xfffffff0

   0x080484d8 <+8>:    sub    esp,0x60  // alloue 96 octets
   0x080484db <+11>:    lea    ebx,[esp+0x1c] // met l'adresse esp+28 dans ebx
   0x080484df <+15>:    mov    eax,0x0 // met 0 dans eax;
   0x080484e4 <+20>:    mov    edx,0x10 // met 16 dans edx 
   0x080484e9 <+25>:    mov    edi,ebx // met ebx dans edi (destination)
   0x080484eb <+27>:    mov    ecx,edx // met edx dans ecx (compteur)
   0x080484ed <+29>:    rep stos DWORD PTR es:[edi],eax // prend l'adresse esp+28 et remplit 16 * 4 octets à 0 (64);

   0x080484ef <+31>:    mov    DWORD PTR [esp+0x5c],0x0 // met 0 à l'adresse esp + 92 (int i)

   0x080484f7 <+39>:    mov    DWORD PTR [esp],0x80486b8 // arg0 = ********* ADMIN LOGIN PROMPT *********
   0x080484fe <+46>:    call   0x8048380 <puts@plt> // call puts

   0x08048503 <+51>:    mov    eax,0x80486df // string => Enter Username: 
   0x08048508 <+56>:    mov    DWORD PTR [esp],eax // arg0 = Enter Username: 
   0x0804850b <+59>:    call   0x8048360 <printf@plt> // call printf

   0x08048510 <+64>:    mov    eax,ds:0x804a020 // fd => stdin
   0x08048515 <+69>:    mov    DWORD PTR [esp+0x8],eax // arg2 = stdin
   0x08048519 <+73>:    mov    DWORD PTR [esp+0x4],0x100 // arg1 = 256
   0x08048521 <+81>:    mov    DWORD PTR [esp],0x804a040 // arg0 = variable locale a_user_name
   0x08048528 <+88>:    call   0x8048370 <fgets@plt> // call fgets

   0x0804852d <+93>:    call   0x8048464 <verify_user_name> // call verify_user_name

   0x08048532 <+98>:    mov    DWORD PTR [esp+0x5c],eax // recupere le resultat de verify_user_name et le met dans une variable
   
   0x08048536 <+102>:    cmp    DWORD PTR [esp+0x5c],0x0// compare i avec 0
   0x0804853b <+107>:    je     0x8048550 <main+128> // si c'est vrai on vas a l'instruction +128

   0x0804853d <+109>:    mov    DWORD PTR [esp],0x80486f0 // arg0 = nope, incorrect username...\n
   0x08048544 <+116>:    call   0x8048380 <puts@plt> // call puts

   0x08048549 <+121>:    mov    eax,0x1 // met 1 dans eax
   0x0804854e <+126>:    jmp    0x80485af <main+223> // jump a +223 (return 1);

   0x08048550 <+128>:    mov    DWORD PTR [esp],0x804870d // arg0 = string => Enter Password:
   0x08048557 <+135>:    call   0x8048380 <puts@plt> // call puts

   0x0804855c <+140>:    mov    eax,ds:0x804a020 // fd = stdin
   0x08048561 <+145>:    mov    DWORD PTR [esp+0x8],eax // arg2 = stdin
   0x08048565 <+149>:    mov    DWORD PTR [esp+0x4],0x64 // arg1 = 100
   0x0804856d <+157>:    lea    eax,[esp+0x1c] // recupere adresse de esp + 28 et met dans eax (buff)
   0x08048571 <+161>:    mov    DWORD PTR [esp],eax // arg0 = buff
   0x08048574 <+164>:    call   0x8048370 <fgets@plt> // call fgets

   0x08048579 <+169>:    lea    eax,[esp+0x1c] // recupere adresse de buff
   0x0804857d <+173>:    mov    DWORD PTR [esp],eax // arg0 = buff 
   0x08048580 <+176>:    call   0x80484a3 <verify_user_pass> // call verify_user_pass

   0x08048585 <+181>:    mov    DWORD PTR [esp+0x5c],eax //  recupere le retour de la fonction et la met a dans i
   0x08048589 <+185>:    cmp    DWORD PTR [esp+0x5c],0x0 // compare i avec 0
   0x0804858e <+190>:    je     0x8048597 <main+199> // si c'est vrai go instruction +199
   
   0x08048590 <+192>:    cmp    DWORD PTR [esp+0x5c],0x0 // compare 0 avec i
   0x08048595 <+197>:    je     0x80485aa <main+218> // go a l'instruction +218

   0x08048597 <+199>:    mov    DWORD PTR [esp],0x804871e // arg0 = nope, incorrect password...\n
   0x0804859e <+206>:    call   0x8048380 <puts@plt> // call puts

   0x080485a3 <+211>:    mov    eax,0x1 // met 1 dans eax (return 1)
   0x080485a8 <+216>:    jmp    0x80485af <main+223> // fin

   0x080485aa <+218>:    mov    eax,0x0

   0x080485af <+223>:    lea    esp,[ebp-0x8]
   0x080485b2 <+226>:    pop    ebx
   0x080485b3 <+227>:    pop    edi
   0x080485b4 <+228>:    pop    ebp
   0x080485b5 <+229>:    ret
